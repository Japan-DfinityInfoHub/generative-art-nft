type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type SubAccount = vec nat8;
type Result_3 = 
 variant {
   err: CommonError;
   ok: AccountIdentifier__1;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Result = 
 variant {
   err: CommonError;
   ok;
 };
type MintRequest = 
 record {
   metadata: opt blob;
   to: User;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GenerativeArtNFT = 
 service {
   acceptCycles: () -> ();
   allowance: (AllowanceRequest) -> (Result_1) query;
   approve: (ApproveRequest) -> ();
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier__1) -> (Result_3) query;
   extensions: () -> (vec Extension) query;
   getAllowances: () -> (vec record {
                               TokenIndex;
                               principal;
                             }) query;
   getInstaller: () -> (text);
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier__1;
                           }) query;
   getTokenImages: () -> (vec record {
                                TokenIndex;
                                blob;
                              }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata;
                         }) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   metadata: (TokenIdentifier__1) -> (Result_2) query;
   mintNFT: (MintRequest) -> (TokenIndex);
   setTokenImage: (TokenIndex, text) -> (Result);
   supply: (TokenIdentifier__1) -> (Result_1) query;
   transfer: (TransferRequest) -> (TransferResponse);
   updateTokenImageSetter: (principal) -> (Result);
   getTokenIndexOwnedByUser: (User__1) -> (vec TokenIndex) query;
 };
type Extension = text;
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AllowanceRequest = 
 record {
   owner: User;
   spender: principal;
   token: TokenIdentifier;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : () -> GenerativeArtNFT
